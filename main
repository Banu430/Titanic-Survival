# 1. Import Libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
# 2. Load Dataset (Upload 'train.csv' first in Colab)
train_df = pd.read_csv('/content/tested.csv')
print("First 5 rows of the dataset:")
display(train_df.head())
# 3. Data Overview
print("\nData Info:")
print(train_df.info())

print("\nMissing Values:")
print(train_df.isnull().sum())
# Check available columns
print("Columns before preprocessing:", train_df.columns)

# Fill missing values safely
if 'Age' in train_df.columns:
    train_df['Age'] = train_df['Age'].fillna(train_df['Age'].median())

if 'Embarked' in train_df.columns:
    train_df['Embarked'] = train_df['Embarked'].fillna(train_df['Embarked'].mode()[0])

# Drop unused columns if they exist
for col in ['Cabin', 'Ticket', 'Name', 'PassengerId']:
    if col in train_df.columns:
        train_df.drop(col, axis=1, inplace=True)

# Convert categoricals if they exist
categorical_cols = ['Sex', 'Embarked']
for cat in categorical_cols:
    if cat in train_df.columns:
        train_df = pd.get_dummies(train_df, columns=[cat], drop_first=True)

print("\nData after preprocessing:")
display(train_df.head())


# 5. Feature Selection and Splitting
X = train_df.drop('Survived', axis=1)
y = train_df['Survived']

X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)
# 7. Prediction and Evaluation
predictions = model.predict(X_val)

accuracy = accuracy_score(y_val, predictions)
print(f"\nModel Accuracy: {accuracy:.4f}")

# Confusion Matrix Heatmap
print("\nConfusion Matrix:")
sns.heatmap(confusion_matrix(y_val, predictions), annot=True, fmt='d', cmap='Blues')
plt.show()

# Classification Report
print("\nClassification Report:")
print(classification_report(y_val, predictions))
# 8. Feature Importance Plot
importances = model.feature_importances_
features = X.columns
feat_imp = pd.Series(importances, index=features).sort_values(ascending=False)

print("\nFeature Importance:")
feat_imp.plot(kind='bar', color='purple')
plt.title('Feature Importance')
plt.show()
